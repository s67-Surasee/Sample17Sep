int[][] grid = {{1, 2, 1, 3}, {3, 4, 5, 2}, {2, 5, 3, 4} };
boolean[][] hidden = new boolean[3][4];

void setup() {
    size(500, 500);
    strokeWeight(12); 
    background(255);  
    
    for (int i = 0; i < hidden.length; i++) {
        for (int j = 0; j < hidden[0].length; j++) {
            hidden[i][j] = true;  
        }
    }
}

void draw() {
    background(255);  

    int rows = grid.length;
    int cols = grid[0].length;

    int w = width / cols;  
    int h = height / rows;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            draw_grid(j * w, i * h, w, h);
            
            if (!hidden[i][j]) {  
                draw_lines(10 + j * w, 10 + i * h, grid[i][j]);
            }
        }
    }
}

void draw_grid(int x, int y, int w, int h) {
    noFill();    
    stroke(0);  
    strokeWeight(2);  
    rect(x, y, w, h); 
}

void draw_lines(int x, int y, int n) {
    strokeWeight(12); 
    for (int i = 0; i < n; i++) {
        line(x + i * 20, y, x + i * 20, y + 40); 
    }
}

void mousePressed() {
    int cols = grid[0].length;
    int rows = grid.length;
    
    int w = width / cols;  
    int h = height / rows; 

    int clickedCol = mouseX / w;
    int clickedRow = mouseY / h;

    if (clickedCol >= 0 && clickedCol < cols && clickedRow >= 0 && clickedRow < rows) {
        hidden[clickedRow][clickedCol] = !hidden[clickedRow][clickedCol]; 
    }
}
