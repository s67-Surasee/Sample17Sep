int[][] grid = new int[3][4]; // Define the grid for random numbers
boolean[][] hidden = new boolean[3][4]; 
boolean waitingForMatch = false; 
int firstRow = -1, firstCol = -1; 
int secondRow = -1, secondCol = -1;
boolean[][] revealed = new boolean[3][4];
int revealTime = 1000; 
int revealStartTime = 0; 
boolean gameWon = false;
boolean gameStarted = false; 

void setup() {
    size(500, 500);
    strokeWeight(12);
    background(255);
}

void populateGrid() {
    int[] numbers = new int[6]; 
    for (int i = 0; i < 6; i++) {
        numbers[i] = i + 1; 
    }
    
    int[] pairedNumbers = new int[grid.length * grid[0].length];
    
    for (int i = 0; i < numbers.length; i++) {
        pairedNumbers[i * 2] = numbers[i];
        pairedNumbers[i * 2 + 1] = numbers[i];
    }

    for (int i = pairedNumbers.length - 1; i > 0; i--) {
        int j = (int) random(i + 1);
        int temp = pairedNumbers[i];
        pairedNumbers[i] = pairedNumbers[j];
        pairedNumbers[j] = temp;
    }

    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[i].length; j++) {
            grid[i][j] = pairedNumbers[i * grid[i].length + j];
        }
    }
}

void draw() {
    background(255);

    if (!gameStarted) {
        textSize(32);
        fill(0);
        textAlign(CENTER, CENTER);
        text("Memory Game!", width / 2, height / 2 - 50);
        
        fill(150, 200, 255);
        rect(width / 2 - 75, height / 2 + 10, 150, 50); 
        fill(0);
        textSize(20);
        text("Start Game", width / 2, height / 2 + 35); 
    } else {
        int rows = grid.length;
        int cols = grid[0].length;

        int w = width / cols; 
        int h = height / rows; 

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                draw_grid(j * w, i * h, w, h);

                if (!hidden[i][j] || revealed[i][j] || (i == firstRow && j == firstCol) || (i == secondRow && j == secondCol)) {
                    draw_lines(10 + j * w, 10 + i * h, grid[i][j]);
                }
            }
        }

        gameWon = true;
        for (int i = 0; i < revealed.length; i++) {
            for (int j = 0; j < revealed[i].length; j++) {
                if (!revealed[i][j]) {
                    gameWon = false;
                    break;
                }
            }
        }

        if (gameWon) {
            textSize(32);
            fill(0);
            textAlign(CENTER, CENTER);
            text("You Win!", width / 2, height / 2);
        }

        if (waitingForMatch && millis() - revealStartTime > revealTime) {
            if (grid[firstRow][firstCol] != grid[secondRow][secondCol]) {
                hidden[firstRow][firstCol] = true;
                hidden[secondRow][secondCol] = true;
            } else {
                revealed[firstRow][firstCol] = true;
                revealed[secondRow][secondCol] = true;
            }
            
            firstRow = -1;
            firstCol = -1;
            secondRow = -1;
            secondCol = -1;
            waitingForMatch = false; 
        }
    }
}

void draw_grid(int x, int y, int w, int h) {
    noFill();
    stroke(0);
    strokeWeight(2);
    rect(x, y, w, h);
}

void draw_lines(int x, int y, int n) {
    strokeWeight(12);
    for (int i = 0; i < n; i++) {
        line(x + i * 20, y, x + i * 20, y + 40);
    }
}

void mousePressed() {
    if (!gameStarted) {
        if (mouseX > width / 2 - 75 && mouseX < width / 2 + 75 && mouseY > height / 2 + 10 && mouseY < height / 2 + 60) {
            gameStarted = true; // Start the game
            populateGrid(); // Populate grid with random numbers
            resetGame(); // Reset game state
        }
        return;
    }

    if (waitingForMatch || gameWon) return; // Prevent clicks when the game is over

    int cols = grid[0].length;
    int rows = grid.length;

    int w = width / cols;
    int h = height / rows;

    int clickedCol = mouseX / w;
    int clickedRow = mouseY / h;

    if (clickedCol >= 0 && clickedCol < cols && clickedRow >= 0 && clickedRow < rows) {
        if (hidden[clickedRow][clickedCol]) {
            hidden[clickedRow][clickedCol] = false; 

            if (firstRow == -1 && firstCol == -1) {
                firstRow = clickedRow;
                firstCol = clickedCol; 
            }
            else if (secondRow == -1 && secondCol == -1) {
                secondRow = clickedRow;
                secondCol = clickedCol; 

                waitingForMatch = true; 
                revealStartTime = millis(); 
            }
        }
    }
}

void resetGame() {
    for (int i = 0; i < hidden.length; i++) {
        for (int j = 0; j < hidden[0].length; j++) {
            hidden[i][j] = true;
            revealed[i][j] = false; 
        }
    }
    firstRow = -1;
    firstCol = -1;
    secondRow = -1;
    secondCol = -1;
    waitingForMatch = false; 
}
